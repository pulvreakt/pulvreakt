name: CI/CD Pipeline

on:
  workflow_call:
  workflow_dispatch:

env:
  JDK_DISTRIUTION: temurin
  JDK_VERSION: 17.0.5

jobs:
  staging-repo:
    runs-on: ubuntu-latest
    concurrency:
      group: staging-repo
    if: >-
      !github.event.repository.fork
      && (
        github.event_name != 'pull_request'
        || github.event.pull_request.head.repo.full_name == github.repository
      )
    outputs:
      maven-central-repo-id: ${{ steps.staging-repo.outputs.MavenCentral }}
      next-version: ${{ steps.staging-repo.outputs.new-release-version }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0
      - name: Setup Java
        uses: actions/setup-java@v3.9.0
        with:
          distribution: ${{ env.JDK_DISTRIUTION }}
          java-version: ${{ env.JDK_VERSION }}
          cache: gradle
      - name: Create staging repository
        id: staging-repo
        env:
          GITHUB_TOKEN: ${{ github.token }}
          MAVEN_CENTRAL_USERNAME: nicolasfarabegoli
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
        run: |
          ./gradlew createStagingRepositoryOnMavenCentral --parallel
          [[ -f build/staging-repo-ids.properties ]] || (
            echo "Staging repositories ID file not found" &&
            exit 1
          )
          REPO_IDS=$(cat build/staging-repo-ids.properties)
          echo "Staging repositories IDs:\n$REPO_IDS"
          echo $REPO_IDS >> $GITHUB_OUTPUT
          npm install
          npx semantic-release --dry-run
          if [[ ! -s ".next-version" ]]; then
            echo "No new release version found"
            echo "new-release-version=$(git describe --tag)" >> $GITHUB_OUTPUT
          else
            echo "New release version found: $(cat .next-version)"
            echo "new-release-version=$(cat .next-version)" >> $GITHUB_OUTPUT
          fi
  build:
    needs: [ staging-repo ]
    strategy:
      matrix:
        os: [ ubuntu, macos, windows ]
    runs-on: ${{ matrix.os }}-latest
    concurrency:
      group: build-${{ github.workflow }}-${{ matrix.os }}-${{ github.event.number || github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0
      - name: Setup Java
        uses: actions/setup-java@v3.9.0
        with:
          distribution: ${{ env.JDK_DISTRIUTION }}
          java-version: ${{ env.JDK_VERSION }}
          cache: gradle
      - name: Run assemble and check tasks
        run: |
          ./gradlew assemble --parallel
          ./gradlew check --parallel
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test upload artifacts
        if: >-
          !github.event.repository.fork
          && (
            github.event_name != 'pull_request'
            || github.event.pull_request.head.repo.full_name == github.repository
          )
        run: ./gradlew -PisMainHost=${{ runner.os == 'Linux' }} -Pversion="${{ needs.staging-repo.outputs.next-version }}" -PstagingRepositoryId=${{ needs.staging-repo.outputs.maven-central-repo-id }} uploadAll --parallel
        env:
          MAVEN_CENTRAL_USERNAME: nicolasfarabegoli
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_PRIVATEKEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_PASSPHRASE }}
          ORG_GRADLE_PROJECT_releaseStage: true
      - name: Upload code coverage result
        if: ${{ runner.os == 'Linux' }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/reports/kover/merged/xml/report.xml
          flags: unittests
          fail_ci_if_error: true
          verbose: true

  docsite:
    runs-on: ubuntu-latest
    concurrency:
      group: docsite
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3.3.0
      - uses: actions/setup-node@v3
        with:
          node-version: 18.12
      - name: Build docsite
        run: |
          cd docsite
          yarn install
          yarn run build
      - name: Release docsite to Github Pages
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
        uses: JamesIves/github-pages-deploy-action@v4.4.1
        with:
          BRANCH: gh-pages
          FOLDER: docsite/build

  close-staging-repos:
    needs: [ staging-repo, build ]
    runs-on: ubuntu-latest
    concurrency:
      group: close-staging-repos
    if: >-
      !github.event.repository.fork
      && (
        github.event_name != 'pull_request'
        || github.event.pull_request.head.repo.full_name == github.repository
      )
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3.3.0
      - name: Setup Java
        uses: actions/setup-java@v3.9.0
        with:
          distribution: ${{ env.JDK_DISTRIUTION }}
          java-version: ${{ env.JDK_VERSION }}
          cache: gradle
      - name: Close staging repositories
        run: |
          ./gradlew -PstagingRepositoryId=${{ needs.staging-repo.outputs.maven-central-repo-id }} close --parallel
        env:
          MAVEN_CENTRAL_USERNAME: nicolasfarabegoli
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}

  release:
    concurrency:
      group: release
    needs: [ staging-repo, build, docsite, close-staging-repos ]
    runs-on: ubuntu-latest
    # Prevent the release job if the run is on a PR or a fork
    if: >-
      !github.event.repository.fork
      && (github.event_name != 'pull_request' ||
        github.event.pull_request.head.repo.full_name == github.repository
      )
      && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_TOKEN }}
      - name: Setup Java
        uses: actions/setup-java@v3.9.0
        with:
          distribution: ${{ env.JDK_DISTRIUTION }}
          java-version: ${{ env.JDK_VERSION }}
          server-id: ossrh
          server-username: nicolasfarabegoli
          server-password: MAVEN_CENTRAL_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATEKEY }}
          gpg-passphrase: GPG_PASSPHRASE
          cache: gradle
      - name: Release artifacts
        run: |
          npm install
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ github.token }}
          STAGING_REPO_ID: ${{ needs.staging-repo.outputs.maven-central-repo-id }}
          MAVEN_CENTRAL_USERNAME: nicolasfarabegoli
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_PRIVATEKEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_PASSPHRASE }}
          ORG_GRADLE_PROJECT_releaseStage: true

  success:
    runs-on: ubuntu-latest
    needs:
      - staging-repo
      - release
      - build
      - docsite
    if: >-
      always() && (
        contains(join(needs.*.result, ','), 'failure')
        || !contains(join(needs.*.result, ','), 'cancelled')
      )
    steps:
      - name: Verify that there were no failures
        run: ${{ !contains(join(needs.*.result, ','), 'failure') }}
